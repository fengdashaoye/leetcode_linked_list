The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, calculate the Hamming distance.

Note:
0 ≤ x, y < 231.

Example:

Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

思路：1011101 与 1001001 之间的汉明距离是 2。
对两个字符串进行异或运算，并统计结果为1的个数，那么这个数就是汉明距离。

这道题主要是对两个十进制数字转换成32位的二进制。
转换过程是这样的：例子：
被除数     计算过程      商      余数
　　28             28/2           14       0
　　14             14/2           7         0
　　7                7/2            3         1
　　3                3/2            1         1
　　1                1/2            0         1
　　十进制数28转换为二进制数为11100


在进行亦或，看最终1的数量。
代码：
class Solution {
    public int hammingDistance(int x, int y) {
        ArrayList<Integer> first = change(x);
        ArrayList<Integer> second = change(y);
        ArrayList<Integer> result = new ArrayList<Integer>();
        int sum = 0;
        for(int i = 0; i < first.size(); i++){
            if(first.get(i) != second.get(i)){
                sum++;
            }
        }
        return sum;
        
        
        
    }
    public ArrayList<Integer> change(int number){
        ArrayList<Integer> result = new ArrayList<Integer>();
        while(number != 0){
            int first = number / 2;
            int second = number % 2;
            result.add(0, second);
            number = first;
        }
        if(result.size() < 32){
            while(result.size() < 32){
                result.add(0, 0);
            }
        }
        return result;
    }
}
