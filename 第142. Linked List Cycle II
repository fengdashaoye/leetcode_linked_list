Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Note: Do not modify the linked list.

思路：之前一道题是判断是否有环，设两个快慢坐标，一个一次走两部，一个一次走一步，如果相遇则为环。
本题需要找到环的入口。

o--o---o---o---o---o---o
       |- -  - -- - - -|
       起点为第3个坐标，相遇时为第6个，这是把slow赋予头结点，slow和fast每次走一步，相遇时便为环的起点
代码：
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        
        ListNode slow = head;
        ListNode fast =  head;
        int panduan = 0;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow){
                panduan = 1;
                break;
            }
        }
        if(panduan == 1){
            slow = head;
            while(slow != fast){
                slow = slow.next;
                fast = fast.next;
            }
            return fast;
        }
        return null;
        
        
        
    }
}
