Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

思路:因为不能改变值，只能转移节点，所以我们需要设置一个前向节点pre,
在head.next = second.next, second.next = head后
另pre.next = second，同时更新head, second 和pre
代码:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode second = head.next;
        ListNode result = second;
        
        head.next = second.next;
        second.next = head;
        ListNode pre = head;
        head = head.next;
        while(head != null && head.next != null){
            
            second = head.next;
            head.next = second.next;
            second.next = head;
            pre.next = second;
            pre = head;
            head = head.next;
        }
        return result;
        
        
    }
}
